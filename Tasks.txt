
Runtime Workflow: 
    - Receive subscription request
    - Execute the request(Register subscription as an object with types of subs and input and payload types) 
        - Make a web socket connection with the client(Make a function to establish the connection)
        - Store the subscription field and sub-selection sets and type of subscription and the websocket connection(Global struct to maintain all the 
            info: store identifier for masking of clients for pubsub responses) 
    - Subscribe to PubSub system using topic or content(Either by sub type or input type in sub or on a whole)
    - After response from PubSub is received 
    - Pass it on to the sub type channel
    - Mask the message from clients and only send to those who subbed to it specifically through args
    - Receive unsubscription request
        - Unsubscribe fron pubsub topic or content if that client was the sole user of the sub
        - Delete all sub info for that connection of the client

At Build Time:
    - Register input and payload types of all the objects used in sub
    - Create channels for each sub type to receive from source stream handler
    - Create the global struct to store all client and sub info


SOURCE STREAM ----------> MAPPER ------------> FILTER --------------> MANAGER -----------------> CLIENT