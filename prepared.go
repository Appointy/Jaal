package jaal

import (
	"context"
	"crypto/sha256"
	"database/sql"
	"encoding/hex"
	"encoding/json"
	"errors"
	"net/http"
	"reflect"
	"time"

	"go.appointy.com/jaal/graphql"
)

type addQueryHandler struct {
	schema *graphql.Schema
	db     *sql.DB
}

//AddQueryHandler handles the generation prepared queries
func AddQueryHandler(schema *graphql.Schema, db *sql.DB) http.Handler {
	if err := createTable(db); err != nil {
		panic(err)
	}

	return &addQueryHandler{
		schema: schema,
		db:     db,
	}
}

//ServeHTTP parses the query sent in the request, validates it and returns an ID generated by hashing through SHA256
func (h *addQueryHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	writeResponse := func(value interface{}, err error) {
		response := httpResponse{}
		if err != nil {
			response.Errors = []string{err.Error()}
		} else {
			response.Data = value
		}

		responseJSON, err := json.Marshal(response)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		if w.Header().Get("Content-Type") == "" {
			w.Header().Set("Content-Type", "application/json")
		}
		w.Write(responseJSON)
	}

	if r.Method != "POST" {
		writeResponse(nil, errors.New("request must be a POST"))
		return
	}

	if r.Body == nil {
		writeResponse(nil, errors.New("request must include a query"))
		return
	}

	var params httpPostBody
	if err := json.NewDecoder(r.Body).Decode(&params); err != nil {
		writeResponse(nil, err)
		return
	}

	query, err := graphql.Parse(params.Query, params.Variables)
	if err != nil {
		writeResponse(nil, err)
		return
	}

	schema := h.schema.Query
	if query.Kind == "mutation" {
		schema = h.schema.Mutation
	}
	if err := graphql.ValidateQuery(r.Context(), schema, query.SelectionSet); err != nil {
		writeResponse(nil, err)
		return
	}

	id, err := h.addPreparedQuery(r.Context(), query)
	if err != nil {
		writeResponse(nil, err)
	}
	writeResponse(reflect.ValueOf(id).Interface(), nil)
}

func (h *addQueryHandler) addPreparedQuery(ctx context.Context, gqlQuery *graphql.Query) (string, error) {
	data, err := json.Marshal(gqlQuery)
	if err != nil {
		return "", err
	}
	hasher := sha256.New()
	hasher.Write(data)
	id := hex.EncodeToString(hasher.Sum(nil))

	const query = `INSERT INTO graphql.queries( name, kind, data, id) VALUES ( $1, $2, $3, $4);`
	if _, err := h.db.ExecContext(ctx, query, gqlQuery.Name, gqlQuery.Kind, data, id); err != nil {
		return "", err
	}

	return id, nil
}

func createTable(db *sql.DB) error {
	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	tx, err := db.BeginTx(ctx, nil)
	if err != nil {
		return err
	}
	defer tx.Rollback()

	if _, err := tx.Exec(`CREATE SCHEMA graphql;`); err != nil {
		return err
	}

	if _, err := tx.Exec(`CREATE TABLE graphql.queries
							(
								name text COLLATE pg_catalog."default" NOT NULL,
								kind text COLLATE pg_catalog."default" NOT NULL,
								data json NOT NULL,
								id text COLLATE pg_catalog."default" NOT NULL,
								CONSTRAINT queries_pkey PRIMARY KEY (id)
							);`,
	); err != nil {
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}
